#
# This file acts as a stand in for the client environment
# In a real client we will obtain the environment via  Environment variables
# how for testing purposes we will define here.
#

#
# The name of machine on which the ECF server is running. It was *this* server that
# sent the job.
#
ECF_HOST = localhost


#
# The path name to the node in the server.
# **********************************************************************************
# For Test purposes if this does not correspond to the loaded Defs tree it will fail.
# ***********************************************************************************
#
ECF_NAME = /aSuit/aFam/aTask

#
# When a server submits a task, it generates a unique password. This is
# used by the client to authenticate any messaged sent back to the server
# For the moment we will just choose a name like process.
# **********************************************************************
# For *test* purposes this should be same as Submittable::DUMMY_JOBS_PASSWORD
# If this variable is NOT set we ignore the request. 
# Shorted from DummyJobsPassword to _DJP_ to save on bytes
# ***********************************************************************
#
ECF_PASS = _DJP_ 

#
#  The number of times we should submitted a job, if it is aborted.
#
ECF_TRYNO = 3

#
# This file lists all the alternate host names, that should be tried if client cannot
# communicate with ECF_HOST host. If the files does exist or cannot be opened we continue
# connection to ECF_HOST. The port number must be the same as the job supplied port number
#
ECF_HOSTFILE = ecf_hostsfile

#
# This variable controls for how long child commands continue trying to connect to Server before failing.
# Maximum time in seconds for client to deliver message to server/servers. This is
# typically 24 hours in a real environment. It is this long to allow operators to
# recover from any crashes.
#
ECF_TIMEOUT = 20

#
# If communication with server fails, client will exit with failure immediately
# This avoid repeated attempts to connect to the server
# If set to 1 and ECF denies access, the client will exit with failure
#
ECF_DENIED = 0

#
# The TCP/IP port on the server to call
#
ECF_PORT = 3141

#
# If this value is set we abort immediately with a valid return
#
NO_ECF = 0

